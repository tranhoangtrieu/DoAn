-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."Account"
(
    "DisplayName" character varying(50) COLLATE pg_catalog."default" NOT NULL,
    "UserName" character varying(50) COLLATE pg_catalog."default" NOT NULL,
    "PassWord" character varying(50) COLLATE pg_catalog."default" NOT NULL,
    "Type" integer NOT NULL DEFAULT 0,
    CONSTRAINT account_pkey PRIMARY KEY ("UserName")
);

CREATE TABLE IF NOT EXISTS public."Bill"
(
    id integer NOT NULL DEFAULT nextval('bill_id_seq'::regclass),
    datecheckin date NOT NULL DEFAULT CURRENT_DATE,
    datecheckout date,
    "idTable" integer NOT NULL,
    discount integer,
    totalprice double precision,
    status integer NOT NULL DEFAULT 0,
    CONSTRAINT bill_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."BillInfo"
(
    id integer NOT NULL DEFAULT nextval('billinfo_id_seq'::regclass),
    "idBill" integer NOT NULL,
    "idFood" integer NOT NULL,
    count integer NOT NULL DEFAULT 0,
    CONSTRAINT billinfo_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."Food"
(
    id integer NOT NULL DEFAULT nextval('food_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Chưa đặt tên'::character varying,
    "idCategory" integer NOT NULL,
    price double precision NOT NULL DEFAULT 0,
    CONSTRAINT food_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."FoodCategory"
(
    id integer NOT NULL DEFAULT nextval('foodcategory_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Chưa đặt tên'::character varying,
    CONSTRAINT foodcategory_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public."TableFood"
(
    id integer NOT NULL DEFAULT nextval('tablefood_id_seq'::regclass),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Chưa đặt tên'::character varying,
    status character varying(50) COLLATE pg_catalog."default" NOT NULL DEFAULT 'Trống'::character varying,
    CONSTRAINT tablefood_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public."Bill"
    ADD CONSTRAINT bill_idtable_fkey FOREIGN KEY ("idTable")
    REFERENCES public."TableFood" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."BillInfo"
    ADD CONSTRAINT billinfo_idbill_fkey FOREIGN KEY ("idBill")
    REFERENCES public."Bill" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."BillInfo"
    ADD CONSTRAINT billinfo_idfood_fkey FOREIGN KEY ("idFood")
    REFERENCES public."Food" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."Food"
    ADD CONSTRAINT food_idcategory_fkey FOREIGN KEY ("idCategory")
    REFERENCES public."FoodCategory" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

CREATE EXTENSION unaccent;

CREATE OR REPLACE PROCEDURE public.USP_InsertBillInfo(
    in_idBill INT,
    in_idFood INT,
    in_count INT
)
LANGUAGE plpgsql
AS $$
DECLARE
    isExitsBillInfo INT;
    foodCount INT := 1;
    newCount INT;
BEGIN
    SELECT id, count INTO isExitsBillInfo, foodCount
    FROM public."BillInfo" AS b
    WHERE idBill = in_idBill AND idFood = in_idFood;

    IF (isExitsBillInfo IS NOT NULL) THEN
        newCount := foodCount + in_count;
        IF (newCount > 0) THEN
            UPDATE public."BillInfo" SET "count" = newCount WHERE idBill = in_idBill AND idFood = in_idFood;
        ELSE
            DELETE FROM public."BillInfo" WHERE idBill = in_idBill AND idFood = in_idFood;
        END IF;
    ELSE
        INSERT INTO public."BillInfo" (idBill, idFood, "count")
        VALUES (in_idBill, in_idFood, in_count);
    END IF;
END;
$$;

CREATE OR REPLACE PROCEDURE public.USP_InsertBill(
    in_idTable INT
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO public."Bill" ("datecheckin", "datecheckout", "idTable", "status", "discount")
    VALUES (CURRENT_DATE, NULL, in_idTable, 0, 0);
END;
$$;


----------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE USP_InsertBillInfo(
    IN idBill INT,
    IN idFood INT,
    IN count INT
)
LANGUAGE plpgsql
AS $$
DECLARE
    isExitsBillInfo INT;
    foodCount INT := 1;
    newCount INT;
BEGIN
    SELECT b.id, b."count" INTO isExitsBillInfo, foodCount
    FROM "BillInfo" AS b
    WHERE b."idBill" = idBill AND b."idFood" = idFood;

    IF (isExitsBillInfo > 0) THEN
        newCount := foodCount + count;
        IF (newCount > 0) THEN
            UPDATE "BillInfo"
            SET "count" = foodCount + count
            WHERE "idFood" = idFood;
        ELSE
            DELETE FROM "BillInfo" WHERE "idBill" = idBill AND "idFood" = idFood;
        END IF;
    ELSE
        INSERT INTO "BillInfo" ("idBill", "idFood", "count")
        VALUES (idBill, idFood, count);
    END IF;
END;
$$;

----------------------------------------------------------------------

CREATE OR REPLACE FUNCTION public.UTG_UpdateBillInfo()
RETURNS TRIGGER AS $$
DECLARE
    idBill INT;
    idTable INT;
    count INT;
BEGIN
    IF (TG_OP = 'INSERT') THEN
        idBill := NEW."idBill";
    ELSIF (TG_OP = 'UPDATE') THEN
        idBill := NEW."idBill";
    END IF;

    SELECT "idTable" INTO idTable FROM public."Bill" WHERE "id" = idBill AND "status" = 0;

    SELECT COUNT(*) INTO count FROM public."BillInfo" WHERE "idBill" = idBill;

    IF (count > 0) THEN
        UPDATE public."TableFood" SET "status" = N'Có người' WHERE "id" = idTable;
    ELSE
        UPDATE public."TableFood" SET "status" = N'Trống' WHERE "id" = idTable;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER UTG_UpdateBillInfo
AFTER INSERT OR UPDATE ON public."BillInfo"
FOR EACH ROW
EXECUTE FUNCTION public.UTG_UpdateBillInfo();




----------------------------------------------------------------------

CREATE OR REPLACE FUNCTION public.UTG_UpdateBill()
RETURNS TRIGGER AS $$
DECLARE
    idBill INT;
    idTable INT;
    count INT;
BEGIN
    IF (TG_OP = 'UPDATE') THEN
        idBill := NEW."id";
    END IF;

    SELECT "idTable" INTO idTable FROM public."Bill" WHERE "id" = idBill;

    SELECT COUNT(*) INTO count FROM public."Bill" WHERE "idTable" = idTable AND "status" = 0;

    IF (count = 0) THEN
        UPDATE public."TableFood" SET "status" = N'Trống' WHERE "id" = idTable;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER UTG_UpdateBill
AFTER UPDATE ON public."Bill"
FOR EACH ROW
EXECUTE FUNCTION public.UTG_UpdateBill();




----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.USP_GetListBillDate(
    checkIn date,
    checkOut date
)
RETURNS TABLE (name character varying, totalprice double precision, DateCheckIn date, DateCheckOut date, discount integer)
AS $$
BEGIN
    RETURN QUERY
    SELECT t.name, b.totalprice, b.datecheckin, b.datecheckout, b.discount
FROM public."Bill" b 
INNER JOIN public."TableFood" t ON t.id = b."idTable"
WHERE b.datecheckin >= checkIn AND b.datecheckout <= checkOut AND b.status = 1;
 END;
$$ LANGUAGE plpgsql;


----------------------------------------------------------------------
END;




